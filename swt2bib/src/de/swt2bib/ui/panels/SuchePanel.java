package de.swt2bib.ui.panels;

import de.swt2bib.Logger;
import de.swt2bib.datenlogik.dto.Genre;
import de.swt2bib.datenlogik.dto.Kategorie;
import de.swt2bib.datenlogik.dto.Medien;
import de.swt2bib.fachlogik.languageverwaltung.PropertyName;
import de.swt2bib.ui.ElternComboboxPanel;
import de.swt2bib.ui.PanelHandler;
import java.util.List;
import java.util.Properties;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author root
 */
public class SuchePanel extends ElternComboboxPanel {

    List<Medien> medienListe;

    /**
     * Creates new form SuchePanel
     * @param panelHandler Angabe Panelhandler
     */
    public SuchePanel(PanelHandler panelHandler) {
        super(panelHandler);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sucheField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        kategorieLable = new javax.swing.JLabel();
        genreLable = new javax.swing.JLabel();
        kategorieComboBox = new javax.swing.JComboBox<>();
        genreComboBox = new javax.swing.JComboBox<>();
        selectButton = new javax.swing.JButton();

        sucheField.setText("Suche");
        sucheField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sucheFieldActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Kategorie", "Genre", "ISBN", "Verfügbar"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        kategorieLable.setText("Katgorie");

        genreLable.setText("Genre");

        kategorieComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        kategorieComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kategorieComboBoxActionPerformed(evt);
            }
        });

        genreComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        genreComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreComboBoxActionPerformed(evt);
            }
        });

        selectButton.setText("Auswählen");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(kategorieLable)
                .addGap(26, 26, 26)
                .addComponent(kategorieComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(genreLable)
                .addGap(18, 18, 18)
                .addComponent(genreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(selectButton))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(sucheField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sucheField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kategorieLable)
                    .addComponent(genreLable)
                    .addComponent(kategorieComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectButton))
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Ruft das Select Panel auf.
     *
     * @param evt
     */
    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        if (panelHandler.getAktuellerUser() != null) {
            try {
                panelHandler.setSelectPanel(getMediumfromIndices(getListSelections()));
            } catch (Exception e) {
                System.err.println("problem beim aufrufen vom selectpanel");
            }
        }
    }//GEN-LAST:event_selectButtonActionPerformed

    /**
     * Ruft die Methode setSerchTitel auf.
     *
     * @param evt
     */
    private void sucheFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sucheFieldActionPerformed
        setSearchTitel(sucheField.getText());
    }//GEN-LAST:event_sucheFieldActionPerformed

    /**
     * Auswahl der Kategorie durch eine ComboBox.
     *
     * @param evt
     */
    private void kategorieComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kategorieComboBoxActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String text = (String) kategorieComboBox.getSelectedItem();
        for (int i = model.getRowCount() - 1; i > -1; i--) {
            model.removeRow(i);
        }
        int kategorieid = -1;
        List<Kategorie> list = panelHandler.getKategorieListe();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getBezeichnung().equals(text)) {
                kategorieid = (int) list.get(i).getId();
            }
        }
        for (int i = 0; i < medienListe.size(); i++) {
            if (medienListe.get(i).getKategorienId() == kategorieid) {
                model.addRow(addObject(i));
            }
        }
    }//GEN-LAST:event_kategorieComboBoxActionPerformed

    /**
     * Auswahl des Genres durch eine Combobox.
     *
     * @param evt
     */
    private void genreComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreComboBoxActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String text = (String) genreComboBox.getSelectedItem();
        for (int i = model.getRowCount() - 1; i > -1; i--) {
            model.removeRow(i);
        }
        int genreid = -1;
        List<Genre> list = panelHandler.getGenreListe();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getBezeichnung().equals(text)) {
                genreid = (int) list.get(i).getId();
            }
        }
        for (int i = 0; i < medienListe.size(); i++) {
            if (medienListe.get(i).getGenreId() == genreid) {
                model.addRow(addObject(i));
            }
        }
    }//GEN-LAST:event_genreComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> genreComboBox;
    private javax.swing.JLabel genreLable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> kategorieComboBox;
    private javax.swing.JLabel kategorieLable;
    private javax.swing.JButton selectButton;
    private javax.swing.JTextField sucheField;
    // End of variables declaration//GEN-END:variables

    /**
     * Sucht einen Titel in der Tabelle.
     *
     * @param text Zu suchender Titel
     */
    void setSearchTitel(String text) {
        medienListe = panelHandler.returnMedien();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = model.getRowCount() - 1; i > -1; i--) {
            model.removeRow(i);
        }
        if (defaultText(text)) {
            for (int i = 0; i < medienListe.size(); i++) {
                model.addRow(addObject(i));
            }
            return;
        }
        for (int i = 0; i < medienListe.size(); i++) {
            if (medienListe.get(i).getName().equals(text)) {
                model.addRow(addObject(i));
            }
        }
    }

    /**
     * Prüft nach einem Default Text.
     *
     * @param text Text, welcher geprüft wird
     * @return Default Text
     */
    private boolean defaultText(String text) {
        boolean empty = text.equals("");
        boolean standard1 = text.equals("Suche");
        boolean standard2 = text.equals("Titelsuchen...");
        boolean standard3 = text.equals("Titelsuche...");
        boolean standard4 = text.equals("タイトル...");
        boolean standard5 = text.equals("Search...");
        return empty || standard1 || standard2 || standard3 || standard4 || standard5;
    }

    /**
     * Füllt eine Tabelle mit Daten.
     */
    public void fillTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = model.getRowCount() - 1; i > -1; i--) {
            model.removeRow(i);
        }
        for (int i = 0; i < medienListe.size(); i++) {
            model.addRow(addObject(i));
        }
    }

    private Medien getMediumfromIndices(int position) {
        Medien selected = null;
        selected = medienListe.get(position);
        return selected;
    }

    private int getListSelections() {
        int[] selected = jTable1.getSelectedRows();
        for (int i = 0; i < selected.length; i++) {
            selected[i] = jTable1.convertRowIndexToModel(selected[i]);
        }
        return selected[0];
    }

    /**
     * Fügt Objekte der Kategorie und dem Genre hinzu.
     *
     * @param i Indices
     * @return Objekt mit den Informationen
     */
    private Object[] addObject(int i) {
        String kategorie = panelHandler.getKatBezeichnung(medienListe.get(i).getKategorienId());
        String genre = panelHandler.getGenBezeichnung(medienListe.get(i).getGenreId());
        return new Object[]{medienListe.get(i).getName(), kategorie, genre, medienListe.get(i).getIsbn(), panelHandler.getVerfuegbare((int) medienListe.get(i).getId())};
    }

    /**
     * Updatet die Informationen in dem aktuellen Panel.
     */
    @Override
    public void update() {
        Logger.info(this, "update");
        medienListe = panelHandler.getMedienliste();
        fillTable();
        setComboboxKategorie(kategorieComboBox, panelHandler.getKategorieListe());
        setComboboxGenre(genreComboBox, panelHandler.getGenreListe());
    }

    /**
     * Setzt die Sprachkonfiguration anhand der Properties um.
     *
     * @param props Properties Datei
     */
    @Override
    public void updateLanguage(Properties props) {
        sucheField.setText((String) props.get(PropertyName.SUCHEFIELD));
        kategorieLable.setText((String) props.get(PropertyName.SUCHEPANEL_KATEGORIELABLE));
        genreLable.setText((String) props.get(PropertyName.SUCHEPANEL_GENRELABLE));
        selectButton.setText((String) props.get(PropertyName.SUCHEPANEL_SELECTBUTTON));
    }
}
