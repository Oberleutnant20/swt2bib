package de.swt2bib.ui.panels;

import de.swt2bib.Logger;
import de.swt2bib.datenlogik.dto.Account;
import de.swt2bib.fachlogik.languageverwaltung.PropertyName;
import de.swt2bib.ui.ElternPanel;
import de.swt2bib.ui.PanelHandler;
import java.util.List;
import java.util.Properties;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author root
 */
public class AccountsBearbeitenPanel extends ElternPanel {

    List<Account> accountListe;

    /**
     * Creates new form AccountsBearbeiten
     * @param panelHandler Angabe Panelhandler
     */
    public AccountsBearbeitenPanel(PanelHandler panelHandler) {
        super(panelHandler);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        sucheAccountField = new javax.swing.JTextField();
        bearbeitenButton = new javax.swing.JButton();
        anlegenButton = new javax.swing.JButton();
        sucheField = new javax.swing.JTextField();
        accountnameField = new javax.swing.JTextField();

        jButton1.setText("jButton1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Usename", "Vorname", "Nachname"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        sucheAccountField.setText("Suche Account");
        sucheAccountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sucheAccountFieldActionPerformed(evt);
            }
        });

        bearbeitenButton.setText("Bearbeiten");
        bearbeitenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bearbeitenButtonActionPerformed(evt);
            }
        });

        anlegenButton.setText("Anlegen");
        anlegenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anlegenButtonActionPerformed(evt);
            }
        });

        sucheField.setText("Titelsuche...");
        sucheField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sucheFieldActionPerformed(evt);
            }
        });

        accountnameField.setText("Accountname");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(sucheAccountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(sucheField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(anlegenButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accountnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                .addComponent(bearbeitenButton)
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(44, 44, 44))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(sucheField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(sucheAccountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bearbeitenButton)
                    .addComponent(anlegenButton)
                    .addComponent(accountnameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Führt eine Suche aus.
     *
     * @param evt
     */
    private void sucheFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sucheFieldActionPerformed
        panelHandler.panelUnsichtbar();
        panelHandler.getSuchePanel().setSearchTitel(sucheField.getText());
        panelHandler.getSuchePanel().setVisible(true);
    }//GEN-LAST:event_sucheFieldActionPerformed

    /**
     * Öffnet das Bearbeitenpanel für Accounts.
     *
     * @param evt
     */
    private void bearbeitenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bearbeitenButtonActionPerformed
        try {
            Account a = getAccountfromIndices(getListSelections());
            panelHandler.panelUnsichtbar();
            panelHandler.getUi().add(panelHandler.getAccountBearbeitenPanel());
            panelHandler.getAccountBearbeitenPanel().setAccount(a);
            panelHandler.getAccountBearbeitenPanel().bearbeitenMitarbeiter();
            panelHandler.getAccountBearbeitenPanel().setVisible(true);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_bearbeitenButtonActionPerformed

    /**
     * Legt einen neuen Nutzer an.
     *
     * @param evt
     */
    private void anlegenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anlegenButtonActionPerformed
        if (acountNameZulaessig(accountnameField.getText())) {
            Account account = new Account(accountnameField.getText(), "todo", false, 0, "todo", "todo", 0, "todo", "todo", "todo");
            panelHandler.panelUnsichtbar();
            panelHandler.getUi().add(panelHandler.getAccountBearbeitenPanel());
            panelHandler.getAccountBearbeitenPanel().bearbeitenMitarbeiter();
            panelHandler.getAccountBearbeitenPanel().setNewAccount(account);
            panelHandler.getAccountBearbeitenPanel().setVisible(true);
        }
    }//GEN-LAST:event_anlegenButtonActionPerformed

    /**
     * sucht einen Account aus der Tabelle.
     *
     * @param evt
     */
    private void sucheAccountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sucheAccountFieldActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = model.getRowCount() - 1; i > -1; i--) {
            model.removeRow(i);
        }
        if (sucheAccountField.getText().equals("Suche Account") || sucheAccountField.getText().equals("")) {
            for (int i = 0; i < accountListe.size(); i++) {
                model.addRow(new Object[]{accountListe.get(i).getUsername(), accountListe.get(i).getNachname(), accountListe.get(i).getVorname()});
            }
        } else {
            for (int i = 0; i < accountListe.size(); i++) {
                if (accountListe.get(i).getUsername().equals(sucheAccountField.getText())) {
                    model.addRow(new Object[]{accountListe.get(i).getUsername(), accountListe.get(i).getNachname(), accountListe.get(i).getVorname()});
                }
            }
        }
    }//GEN-LAST:event_sucheAccountFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accountnameField;
    private javax.swing.JButton anlegenButton;
    private javax.swing.JButton bearbeitenButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField sucheAccountField;
    private javax.swing.JTextField sucheField;
    // End of variables declaration//GEN-END:variables

    /**
     * Füllt die Tabelle mit Daten.
     */
    public void fillTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = model.getRowCount() - 1; i > -1; i--) {
            model.removeRow(i);
        }
        for (int i = 0; i < accountListe.size(); i++) {
            model.addRow(new Object[]{accountListe.get(i).getUsername(), accountListe.get(i).getNachname(), accountListe.get(i).getVorname()});
        }
    }

    /**
     * Fragt einen Account an einer bestimmten Position ab.
     *
     * @param position Index
     * @return Ausgewählter Account
     */
    private Account getAccountfromIndices(int position) {
        Account selected = null;
        selected = accountListe.get(position);
        return selected;
    }

    /**
     * Prüft, welches Element in der Liste gewählt.
     *
     * @return Index
     */
    private int getListSelections() {
        int[] selected = jTable1.getSelectedRows();
        for (int i = 0; i < selected.length; i++) {
            selected[i] = jTable1.convertRowIndexToModel(selected[i]);
        }
        return selected[0];
    }

    /**
     * Prüft, ob ein Accountname schon vorhanden ist.
     *
     * @param text Nutzername, welcher geprüft werden soll.
     * @return True, wenn der Name verfügbar ist. False, wenn bereits vergeben.
     */
    private boolean acountNameZulaessig(String text) {
        if (text.length() <= 8 && text.length() > 0) {
            for (int i = 0; i < accountListe.size(); i++) {
                if (accountListe.get(i).getUsername().equals(text)) {
                    return false;
                }
            }
            return true;
        } else {
            return false;
        }
    }

    /**
     * Updatet die Informationen im aktuellen Panel.
     */
    @Override
    public void update() {
        Logger.info(this, "update");
        accountListe = panelHandler.getAllAccounts();
        fillTable();
    }

    /**
     * Setzt die Sprachkonfiguration anhand der Properties um.
     *
     * @param props Properties Datei
     */
    @Override
    public void updateLanguage(Properties props) {
        sucheAccountField.setText((String) props.get(PropertyName.ACCOUNTSBEARBEITENPANEL_SUCHEACCOUNTFIELD));
        anlegenButton.setText((String) props.get(PropertyName.ACCOUNTSBEARBEITENPANEL_ANLEGENBUTTON));
        bearbeitenButton.setText((String) props.get(PropertyName.ACCOUNTSBEARBEITENPANEL_BEARBEITENBUTTON));
        sucheField.setText((String) props.get(PropertyName.SUCHEFIELD));
    }
}
